// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: select_available_gyms.sql

package db

import (
	"context"
)

const getAvailableGyms = `-- name: GetAvailableGyms :many
select
  u.id as user_id,
  g.gym_id as gym_id,
  g.access_type as access_type
from users u
inner join access_grants g
on u.id = g.user_id
where u.id = $1
`

type GetAvailableGymsRow struct {
	UserID     int32
	GymID      int32
	AccessType AccessType
}

func (q *Queries) GetAvailableGyms(ctx context.Context, id int32) ([]GetAvailableGymsRow, error) {
	rows, err := q.db.Query(ctx, getAvailableGyms, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAvailableGymsRow
	for rows.Next() {
		var i GetAvailableGymsRow
		if err := rows.Scan(&i.UserID, &i.GymID, &i.AccessType); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
