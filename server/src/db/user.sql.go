// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: user.sql

package db

import (
	"context"
)

const containsUserWithEmail = `-- name: ContainsUserWithEmail :one
select
  count(email) <> 0
from users u
where email = $1
`

func (q *Queries) ContainsUserWithEmail(ctx context.Context, email string) (bool, error) {
	row := q.db.QueryRowContext(ctx, containsUserWithEmail, email)
	var column_1 bool
	err := row.Scan(&column_1)
	return column_1, err
}

const insertUserInfo = `-- name: InsertUserInfo :exec
insert into users (name, email, password)
values ($1, $2, $3)
`

type InsertUserInfoParams struct {
	Name     string `db:"name"`
	Email    string `db:"email"`
	Password string `db:"password"`
}

func (q *Queries) InsertUserInfo(ctx context.Context, arg InsertUserInfoParams) error {
	_, err := q.db.ExecContext(ctx, insertUserInfo, arg.Name, arg.Email, arg.Password)
	return err
}

const selectUserInfo = `-- name: SelectUserInfo :one
select
  name,
  email,
  password
from users u
where id = $1
limit 1
`

type SelectUserInfoRow struct {
	Name     string `db:"name"`
	Email    string `db:"email"`
	Password string `db:"password"`
}

func (q *Queries) SelectUserInfo(ctx context.Context, id int64) (SelectUserInfoRow, error) {
	row := q.db.QueryRowContext(ctx, selectUserInfo, id)
	var i SelectUserInfoRow
	err := row.Scan(&i.Name, &i.Email, &i.Password)
	return i, err
}

const selectUserInfoByEmail = `-- name: SelectUserInfoByEmail :one
select
  id,
  name,
  email,
  password
from users
where email = $1
`

type SelectUserInfoByEmailRow struct {
	ID       int64  `db:"id"`
	Name     string `db:"name"`
	Email    string `db:"email"`
	Password string `db:"password"`
}

func (q *Queries) SelectUserInfoByEmail(ctx context.Context, email string) (SelectUserInfoByEmailRow, error) {
	row := q.db.QueryRowContext(ctx, selectUserInfoByEmail, email)
	var i SelectUserInfoByEmailRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
	)
	return i, err
}
