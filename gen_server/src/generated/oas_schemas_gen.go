// Code generated by ogen, DO NOT EDIT.

package api

import (
	"io"
	"time"

	"github.com/go-faster/errors"
)

type AuthKey string

// Ref: #/components/schemas/AuthTokens
type AuthTokens struct {
	AccessToken  string `json:"access_token"`
	RefreshToken string `json:"refresh_token"`
}

// GetAccessToken returns the value of AccessToken.
func (s *AuthTokens) GetAccessToken() string {
	return s.AccessToken
}

// GetRefreshToken returns the value of RefreshToken.
func (s *AuthTokens) GetRefreshToken() string {
	return s.RefreshToken
}

// SetAccessToken sets the value of AccessToken.
func (s *AuthTokens) SetAccessToken(val string) {
	s.AccessToken = val
}

// SetRefreshToken sets the value of RefreshToken.
func (s *AuthTokens) SetRefreshToken(val string) {
	s.RefreshToken = val
}

func (*AuthTokens) refreshAuthTokensRes() {}
func (*AuthTokens) signInRes()            {}

type AvatarId string

type BadRequest struct {
	// Bad request response code.
	Code BadRequestCode `json:"code"`
	// Error details.
	Message string `json:"message"`
}

// GetCode returns the value of Code.
func (s *BadRequest) GetCode() BadRequestCode {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *BadRequest) GetMessage() string {
	return s.Message
}

// SetCode sets the value of Code.
func (s *BadRequest) SetCode(val BadRequestCode) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *BadRequest) SetMessage(val string) {
	s.Message = val
}

func (*BadRequest) createGymRes()         {}
func (*BadRequest) localGymAssignRes()    {}
func (*BadRequest) refreshAuthTokensRes() {}
func (*BadRequest) signInRes()            {}
func (*BadRequest) signUpRes()            {}
func (*BadRequest) startCameraActionRes() {}
func (*BadRequest) startSessionRes()      {}
func (*BadRequest) stopCameraActionRes()  {}

// Bad request response code.
type BadRequestCode string

const (
	BadRequestCodeBADREQUEST BadRequestCode = "BAD_REQUEST"
)

// AllValues returns all BadRequestCode values.
func (BadRequestCode) AllValues() []BadRequestCode {
	return []BadRequestCode{
		BadRequestCodeBADREQUEST,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s BadRequestCode) MarshalText() ([]byte, error) {
	switch s {
	case BadRequestCodeBADREQUEST:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *BadRequestCode) UnmarshalText(data []byte) error {
	switch BadRequestCode(data) {
	case BadRequestCodeBADREQUEST:
		*s = BadRequestCodeBADREQUEST
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Parameters for performing camera action.
// Ref: #/components/schemas/CameraAction
type CameraAction struct {
	Velocity CameraActionVelocity `json:"velocity"`
	Deadline string               `json:"deadline"`
}

// GetVelocity returns the value of Velocity.
func (s *CameraAction) GetVelocity() CameraActionVelocity {
	return s.Velocity
}

// GetDeadline returns the value of Deadline.
func (s *CameraAction) GetDeadline() string {
	return s.Deadline
}

// SetVelocity sets the value of Velocity.
func (s *CameraAction) SetVelocity(val CameraActionVelocity) {
	s.Velocity = val
}

// SetDeadline sets the value of Deadline.
func (s *CameraAction) SetDeadline(val string) {
	s.Deadline = val
}

type CameraActionVelocity struct {
	Pan  float32 `json:"pan"`
	Tilt float32 `json:"tilt"`
	Zoom float32 `json:"zoom"`
}

// GetPan returns the value of Pan.
func (s *CameraActionVelocity) GetPan() float32 {
	return s.Pan
}

// GetTilt returns the value of Tilt.
func (s *CameraActionVelocity) GetTilt() float32 {
	return s.Tilt
}

// GetZoom returns the value of Zoom.
func (s *CameraActionVelocity) GetZoom() float32 {
	return s.Zoom
}

// SetPan sets the value of Pan.
func (s *CameraActionVelocity) SetPan(val float32) {
	s.Pan = val
}

// SetTilt sets the value of Tilt.
func (s *CameraActionVelocity) SetTilt(val float32) {
	s.Tilt = val
}

// SetZoom sets the value of Zoom.
func (s *CameraActionVelocity) SetZoom(val float32) {
	s.Zoom = val
}

// Camera info.
// Ref: #/components/schemas/CameraInfo
type CameraInfo struct {
	CameraID ID `json:"camera_id"`
	// Camera area description.
	Description string `json:"description"`
	// Current camera user.
	OccupiedBy OptString `json:"occupied_by"`
}

// GetCameraID returns the value of CameraID.
func (s *CameraInfo) GetCameraID() ID {
	return s.CameraID
}

// GetDescription returns the value of Description.
func (s *CameraInfo) GetDescription() string {
	return s.Description
}

// GetOccupiedBy returns the value of OccupiedBy.
func (s *CameraInfo) GetOccupiedBy() OptString {
	return s.OccupiedBy
}

// SetCameraID sets the value of CameraID.
func (s *CameraInfo) SetCameraID(val ID) {
	s.CameraID = val
}

// SetDescription sets the value of Description.
func (s *CameraInfo) SetDescription(val string) {
	s.Description = val
}

// SetOccupiedBy sets the value of OccupiedBy.
func (s *CameraInfo) SetOccupiedBy(val OptString) {
	s.OccupiedBy = val
}

// List of cameras info.
// Ref: #/components/schemas/CameraInfos
type CameraInfos struct {
	Cameras []CameraInfo `json:"cameras"`
}

// GetCameras returns the value of Cameras.
func (s *CameraInfos) GetCameras() []CameraInfo {
	return s.Cameras
}

// SetCameras sets the value of Cameras.
func (s *CameraInfos) SetCameras(val []CameraInfo) {
	s.Cameras = val
}

func (*CameraInfos) listCamerasRes() {}

type Dob time.Time

type Email string

type GetApiDocsOK struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s GetApiDocsOK) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

// Gym info available on creation.
// Ref: #/components/schemas/GymAuthInfo
type GymAuthInfo struct {
	AuthKey AuthKey `json:"auth_key"`
}

// GetAuthKey returns the value of AuthKey.
func (s *GymAuthInfo) GetAuthKey() AuthKey {
	return s.AuthKey
}

// SetAuthKey sets the value of AuthKey.
func (s *GymAuthInfo) SetAuthKey(val AuthKey) {
	s.AuthKey = val
}

func (*GymAuthInfo) createGymRes() {}

// Gym info.
// Ref: #/components/schemas/GymInfo
type GymInfo struct {
	Name Name `json:"name"`
}

// GetName returns the value of Name.
func (s *GymInfo) GetName() Name {
	return s.Name
}

// SetName sets the value of Name.
func (s *GymInfo) SetName(val Name) {
	s.Name = val
}

func (*GymInfo) getGymByIdRes() {}

type ID int64

type Name string

type NotFound struct {
	// Bad request response code.
	Code NotFoundCode `json:"code"`
	// Error details.
	Message string `json:"message"`
}

// GetCode returns the value of Code.
func (s *NotFound) GetCode() NotFoundCode {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *NotFound) GetMessage() string {
	return s.Message
}

// SetCode sets the value of Code.
func (s *NotFound) SetCode(val NotFoundCode) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *NotFound) SetMessage(val string) {
	s.Message = val
}

func (*NotFound) finishSessionRes() {}
func (*NotFound) getGymByIdRes()    {}
func (*NotFound) getUserRes()       {}
func (*NotFound) listCamerasRes()   {}
func (*NotFound) updateUserRes()    {}

// Bad request response code.
type NotFoundCode string

const (
	NotFoundCodeNOTFOUND NotFoundCode = "NOT_FOUND"
)

// AllValues returns all NotFoundCode values.
func (NotFoundCode) AllValues() []NotFoundCode {
	return []NotFoundCode{
		NotFoundCodeNOTFOUND,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s NotFoundCode) MarshalText() ([]byte, error) {
	switch s {
	case NotFoundCodeNOTFOUND:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *NotFoundCode) UnmarshalText(data []byte) error {
	switch NotFoundCode(data) {
	case NotFoundCodeNOTFOUND:
		*s = NotFoundCodeNOTFOUND
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type Ok struct {
	// OK status.
	Status OkStatus `json:"status"`
}

// GetStatus returns the value of Status.
func (s *Ok) GetStatus() OkStatus {
	return s.Status
}

// SetStatus sets the value of Status.
func (s *Ok) SetStatus(val OkStatus) {
	s.Status = val
}

func (*Ok) finishSessionRes()     {}
func (*Ok) localGymAssignRes()    {}
func (*Ok) signUpRes()            {}
func (*Ok) startCameraActionRes() {}
func (*Ok) stopCameraActionRes()  {}
func (*Ok) updateUserRes()        {}

// OK status.
type OkStatus string

const (
	OkStatusOK OkStatus = "OK"
)

// AllValues returns all OkStatus values.
func (OkStatus) AllValues() []OkStatus {
	return []OkStatus{
		OkStatusOK,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s OkStatus) MarshalText() ([]byte, error) {
	switch s {
	case OkStatusOK:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *OkStatus) UnmarshalText(data []byte) error {
	switch OkStatus(data) {
	case OkStatusOK:
		*s = OkStatusOK
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// NewOptAvatarId returns new OptAvatarId with value set to v.
func NewOptAvatarId(v AvatarId) OptAvatarId {
	return OptAvatarId{
		Value: v,
		Set:   true,
	}
}

// OptAvatarId is optional AvatarId.
type OptAvatarId struct {
	Value AvatarId
	Set   bool
}

// IsSet returns true if OptAvatarId was set.
func (o OptAvatarId) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAvatarId) Reset() {
	var v AvatarId
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAvatarId) SetTo(v AvatarId) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAvatarId) Get() (v AvatarId, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAvatarId) Or(d AvatarId) AvatarId {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDob returns new OptDob with value set to v.
func NewOptDob(v Dob) OptDob {
	return OptDob{
		Value: v,
		Set:   true,
	}
}

// OptDob is optional Dob.
type OptDob struct {
	Value Dob
	Set   bool
}

// IsSet returns true if OptDob was set.
func (o OptDob) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDob) Reset() {
	var v Dob
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDob) SetTo(v Dob) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDob) Get() (v Dob, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDob) Or(d Dob) Dob {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptEmail returns new OptEmail with value set to v.
func NewOptEmail(v Email) OptEmail {
	return OptEmail{
		Value: v,
		Set:   true,
	}
}

// OptEmail is optional Email.
type OptEmail struct {
	Value Email
	Set   bool
}

// IsSet returns true if OptEmail was set.
func (o OptEmail) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptEmail) Reset() {
	var v Email
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptEmail) SetTo(v Email) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptEmail) Get() (v Email, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptEmail) Or(d Email) Email {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptName returns new OptName with value set to v.
func NewOptName(v Name) OptName {
	return OptName{
		Value: v,
		Set:   true,
	}
}

// OptName is optional Name.
type OptName struct {
	Value Name
	Set   bool
}

// IsSet returns true if OptName was set.
func (o OptName) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptName) Reset() {
	var v Name
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptName) SetTo(v Name) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptName) Get() (v Name, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptName) Or(d Name) Name {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

type Password string

// Ref: #/components/schemas/Session
type Session struct {
	SessionID ID `json:"session_id"`
	GymID     ID `json:"gym_id"`
	CameraID  ID `json:"camera_id"`
}

// GetSessionID returns the value of SessionID.
func (s *Session) GetSessionID() ID {
	return s.SessionID
}

// GetGymID returns the value of GymID.
func (s *Session) GetGymID() ID {
	return s.GymID
}

// GetCameraID returns the value of CameraID.
func (s *Session) GetCameraID() ID {
	return s.CameraID
}

// SetSessionID sets the value of SessionID.
func (s *Session) SetSessionID(val ID) {
	s.SessionID = val
}

// SetGymID sets the value of GymID.
func (s *Session) SetGymID(val ID) {
	s.GymID = val
}

// SetCameraID sets the value of CameraID.
func (s *Session) SetCameraID(val ID) {
	s.CameraID = val
}

// Session params to start.
// Ref: #/components/schemas/SessionToStart
type SessionToStart struct {
	GymID    ID `json:"gym_id"`
	CameraID ID `json:"camera_id"`
}

// GetGymID returns the value of GymID.
func (s *SessionToStart) GetGymID() ID {
	return s.GymID
}

// GetCameraID returns the value of CameraID.
func (s *SessionToStart) GetCameraID() ID {
	return s.CameraID
}

// SetGymID sets the value of GymID.
func (s *SessionToStart) SetGymID(val ID) {
	s.GymID = val
}

// SetCameraID sets the value of CameraID.
func (s *SessionToStart) SetCameraID(val ID) {
	s.CameraID = val
}

// List of sessions.
// Ref: #/components/schemas/SessionsList
type SessionsList struct {
	Sessions []Session `json:"sessions"`
}

// GetSessions returns the value of Sessions.
func (s *SessionsList) GetSessions() []Session {
	return s.Sessions
}

// SetSessions sets the value of Sessions.
func (s *SessionsList) SetSessions(val []Session) {
	s.Sessions = val
}

// User sign in data.
// Ref: #/components/schemas/SignInInfo
type SignInInfo struct {
	Email    Email    `json:"email"`
	Password Password `json:"password"`
}

// GetEmail returns the value of Email.
func (s *SignInInfo) GetEmail() Email {
	return s.Email
}

// GetPassword returns the value of Password.
func (s *SignInInfo) GetPassword() Password {
	return s.Password
}

// SetEmail sets the value of Email.
func (s *SignInInfo) SetEmail(val Email) {
	s.Email = val
}

// SetPassword sets the value of Password.
func (s *SignInInfo) SetPassword(val Password) {
	s.Password = val
}

// User sign up data.
// Ref: #/components/schemas/SignUpInfo
type SignUpInfo struct {
	Name     Name     `json:"name"`
	Email    Email    `json:"email"`
	Password Password `json:"password"`
}

// GetName returns the value of Name.
func (s *SignUpInfo) GetName() Name {
	return s.Name
}

// GetEmail returns the value of Email.
func (s *SignUpInfo) GetEmail() Email {
	return s.Email
}

// GetPassword returns the value of Password.
func (s *SignUpInfo) GetPassword() Password {
	return s.Password
}

// SetName sets the value of Name.
func (s *SignUpInfo) SetName(val Name) {
	s.Name = val
}

// SetEmail sets the value of Email.
func (s *SignUpInfo) SetEmail(val Email) {
	s.Email = val
}

// SetPassword sets the value of Password.
func (s *SignUpInfo) SetPassword(val Password) {
	s.Password = val
}

// Started session info.
// Ref: #/components/schemas/StartedSession
type StartedSession struct {
	SessionID ID `json:"session_id"`
}

// GetSessionID returns the value of SessionID.
func (s *StartedSession) GetSessionID() ID {
	return s.SessionID
}

// SetSessionID sets the value of SessionID.
func (s *StartedSession) SetSessionID(val ID) {
	s.SessionID = val
}

func (*StartedSession) startSessionRes() {}

// User info.
// Ref: #/components/schemas/UserInfo
type UserInfo struct {
	Name     Name        `json:"name"`
	Email    Email       `json:"email"`
	Dob      OptDob      `json:"dob"`
	AvatarID OptAvatarId `json:"avatar_id"`
}

// GetName returns the value of Name.
func (s *UserInfo) GetName() Name {
	return s.Name
}

// GetEmail returns the value of Email.
func (s *UserInfo) GetEmail() Email {
	return s.Email
}

// GetDob returns the value of Dob.
func (s *UserInfo) GetDob() OptDob {
	return s.Dob
}

// GetAvatarID returns the value of AvatarID.
func (s *UserInfo) GetAvatarID() OptAvatarId {
	return s.AvatarID
}

// SetName sets the value of Name.
func (s *UserInfo) SetName(val Name) {
	s.Name = val
}

// SetEmail sets the value of Email.
func (s *UserInfo) SetEmail(val Email) {
	s.Email = val
}

// SetDob sets the value of Dob.
func (s *UserInfo) SetDob(val OptDob) {
	s.Dob = val
}

// SetAvatarID sets the value of AvatarID.
func (s *UserInfo) SetAvatarID(val OptAvatarId) {
	s.AvatarID = val
}

func (*UserInfo) getUserRes() {}

// User info to update.
// Ref: #/components/schemas/UserToUpdate
type UserToUpdate struct {
	Name     OptName     `json:"name"`
	Email    OptEmail    `json:"email"`
	Dob      OptDob      `json:"dob"`
	AvatarID OptAvatarId `json:"avatar_id"`
}

// GetName returns the value of Name.
func (s *UserToUpdate) GetName() OptName {
	return s.Name
}

// GetEmail returns the value of Email.
func (s *UserToUpdate) GetEmail() OptEmail {
	return s.Email
}

// GetDob returns the value of Dob.
func (s *UserToUpdate) GetDob() OptDob {
	return s.Dob
}

// GetAvatarID returns the value of AvatarID.
func (s *UserToUpdate) GetAvatarID() OptAvatarId {
	return s.AvatarID
}

// SetName sets the value of Name.
func (s *UserToUpdate) SetName(val OptName) {
	s.Name = val
}

// SetEmail sets the value of Email.
func (s *UserToUpdate) SetEmail(val OptEmail) {
	s.Email = val
}

// SetDob sets the value of Dob.
func (s *UserToUpdate) SetDob(val OptDob) {
	s.Dob = val
}

// SetAvatarID sets the value of AvatarID.
func (s *UserToUpdate) SetAvatarID(val OptAvatarId) {
	s.AvatarID = val
}
