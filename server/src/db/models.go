// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0

package db

import (
	"database/sql/driver"
	"fmt"
	"time"
)

type AccessType string

const (
	AccessTypeReadonly AccessType = "readonly"
	AccessTypeAdmin    AccessType = "admin"
)

func (e *AccessType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = AccessType(s)
	case string:
		*e = AccessType(s)
	default:
		return fmt.Errorf("unsupported scan type for AccessType: %T", src)
	}
	return nil
}

type NullAccessType struct {
	AccessType AccessType
	Valid      bool // Valid is true if AccessType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullAccessType) Scan(value interface{}) error {
	if value == nil {
		ns.AccessType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.AccessType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullAccessType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.AccessType), nil
}

type AccessGrant struct {
	ID         int64      `db:"id"`
	UserID     int64      `db:"user_id"`
	GymID      int64      `db:"gym_id"`
	AccessType AccessType `db:"access_type"`
	CreatedAt  time.Time  `db:"created_at"`
	UpdatedAt  time.Time  `db:"updated_at"`
}

type Gym struct {
	ID        int64     `db:"id"`
	Name      string    `db:"name"`
	CreatedAt time.Time `db:"created_at"`
	UpdatedAt time.Time `db:"updated_at"`
	AuthKey   string    `db:"auth_key"`
}

type Session struct {
	ID        int64     `db:"id"`
	UserID    int64     `db:"user_id"`
	CameraID  int64     `db:"camera_id"`
	CreatedAt time.Time `db:"created_at"`
	UpdatedAt time.Time `db:"updated_at"`
	GymID     int32     `db:"gym_id"`
}

type User struct {
	ID        int64     `db:"id"`
	Login     string    `db:"login"`
	CreatedAt time.Time `db:"created_at"`
	UpdatedAt time.Time `db:"updated_at"`
	Password  string    `db:"password"`
	Name      string    `db:"name"`
	Email     string    `db:"email"`
}
