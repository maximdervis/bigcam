// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: gym.sql

package db

import (
	"context"
)

const insertGym = `-- name: InsertGym :exec
insert into gyms (name, auth_key)
values ($1, $2)
`

type InsertGymParams struct {
	Name    string `db:"name"`
	AuthKey string `db:"auth_key"`
}

func (q *Queries) InsertGym(ctx context.Context, arg InsertGymParams) error {
	_, err := q.db.ExecContext(ctx, insertGym, arg.Name, arg.AuthKey)
	return err
}

const selectGymIdByAuthKey = `-- name: SelectGymIdByAuthKey :one
select
  id
from gyms u
where auth_key = $1
limit 1
`

func (q *Queries) SelectGymIdByAuthKey(ctx context.Context, authKey string) (int64, error) {
	row := q.db.QueryRowContext(ctx, selectGymIdByAuthKey, authKey)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const selectGymInfo = `-- name: SelectGymInfo :one
select
  name
from gyms u
where id = $1
limit 1
`

func (q *Queries) SelectGymInfo(ctx context.Context, id int64) (string, error) {
	row := q.db.QueryRowContext(ctx, selectGymInfo, id)
	var name string
	err := row.Scan(&name)
	return name, err
}
